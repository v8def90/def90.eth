---
import CategoryButton from '@components/CategoryButton.astro';
import Custompicture from '@components/custompicture.astro';
import Pagination from '@components/pagination.astro';
import Layout from '@layouts/layout.astro';

import { categories } from '@lib/constants';
import imgToPicture from '@lib/imgToPicture';
import { getCollection } from 'astro:content';

import { format, formatISO, compareDesc } from 'date-fns';

import markdownToHtml from 'zenn-markdown-html';
import 'zenn-content-css';

export const prerender = true;

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog', ({ data }) => {
    return data.draft === false;
  });
  const sortedBlogPosts = blogPosts.sort((a, b) => compareDesc(a.data.pubDate, b.data.pubDate));
  const numberOfPosts = blogPosts.length;

  return sortedBlogPosts.map((post) => {
    const { slug } = post;
    const currentPage = sortedBlogPosts.findIndex((post) => post.slug === slug);

    // 古い記事へ → インデックス増
    const prev =
      currentPage + 1 >= numberOfPosts
        ? {}
        : {
            prevTitle: sortedBlogPosts[currentPage + 1].data.title,
            prev: `/blog/${sortedBlogPosts[currentPage + 1].slug}`
          };

    // 新しい記事へ → インデックス減
    const next =
      currentPage - 1 < 0
        ? {}
        : {
            nextTitle: sortedBlogPosts[currentPage - 1].data.title,
            next: `/blog/${sortedBlogPosts[currentPage - 1].slug}`
          };

    return { params: { slug }, props: { post, url: { ...prev, ...next } } };
  });
}

const { post, url } = Astro.props;

const {
  body,
  data: { title, pubDate, image, category, description }
} = post;
const pubDateISO = formatISO(pubDate);
const pubDateJA = format(pubDate, 'yyyy/MM/dd');

// Astro v4ではESMモジュールの扱いが厳格になり、.defaultプロパティを使用する必要があります
const markdownToHtmlModule = markdownToHtml as unknown as { default?: typeof markdownToHtml };
const html = markdownToHtmlModule.default
  ? markdownToHtmlModule.default(body, {
      embedOrigin: 'https://embed.zenn.studio'
    })
  : markdownToHtml(body, {
      embedOrigin: 'https://embed.zenn.studio'
    });

const convertedHTML = imgToPicture(html);
---

<Layout pageTitle={title} description={description} pageImg={image}>
  <article class="my-10 text-left">
    <Custompicture src={image} alt="" />
    <h1 class="my-10 text-2xl md:text-4xl">{title}</h1>
    <div class="flex-spacebetween mb-10 flex justify-between">
      <time datetime={pubDateISO}>{pubDateJA}</time>

      <ul class="flex flex-wrap gap-3">
        {
          category.map((categorySlug) => {
            const categoryName = categories.find((cat) => cat.categorySlug === categorySlug).categoryName;
            return <CategoryButton categoryName={categoryName} categorySlug={categorySlug} />;
          })
        }
      </ul>
    </div>
    <div class="znc large-space">
      <Fragment set:html={convertedHTML} />
    </div>
    <Pagination {...url} />
  </article>
</Layout>
